plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

group 'com.ddf.fakeplayer'
version '0.5.9-alpha'

repositories {
    maven {
        name 'aliyun-central'
        url 'https://maven.aliyun.com/repository/central'
    }
    maven {
        name 'aliyun-public'
        url 'https://maven.aliyun.com/repository/public'
    }
    maven {
        name 'nukkitx-repo-release'
        url 'https://repo.nukkitx.com/maven-releases/'
    }
    maven {
        name 'nukkitx-repo-snapshot'
        url 'https://repo.nukkitx.com/maven-snapshots/'
    }
    maven {
        name 'minecraft-libraries'
        url "https://libraries.minecraft.net"
    }
}

dependencies {
    implementation 'com.nukkitx.protocol:bedrock-v554:2.9.12-SNAPSHOT'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'com.formdev:flatlaf:1.5'
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'org.slf4j:slf4j-nop:1.7.32'
    implementation 'com.miglayout:miglayout-swing:5.3'
    implementation 'com.mojang:brigadier:1.0.18'
    implementation 'ar.com.hjg:pngj:2.1.0'
    implementation 'org.mozilla:rhino:1.7.13'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
mainClassName = 'com.ddf.fakeplayer.main.Main'

distributions {
    main {
        contents {
            from "LICENSE"
            into ""
        }
    }
}

distTar {
    archiveVersion.set(getFullVersionString())
}

distZip {
    archiveVersion.set(getFullVersionString())
}

run {
    standardInput = System.in
    jvmArgs += '-Dfakeplayer.nogui=true'
}

processResources {
    doLast {
        def file = new File(getDestinationDir(), 'version.properties')
        def text = file.getText('UTF-8')
        text = replace(text, 'VERSION', getFullVersionString())
        file.write(text, 'UTF-8')
    }
}

def getFullVersionString() {
    if (isGithubActions())
        return version.toString() + '-build.' + getGithubRunNumber()
    return version.toString()
}

static def isGithubActions() {
    return System.getenv('GITHUB_ACTIONS') == 'true'
}

static def getGithubRunNumber() {
    if (!isGithubActions())
        return ''
    return System.getenv('GITHUB_RUN_NUMBER')
}

static def replace(String input, String name, String value) {
    def regex = '\\$\\{' + name + '\\}'
    return (input =~ /${regex}/).replaceAll(value)
}

task getVersion {
    print version
}

task runGUI(type: JavaExec) {
    classpath = run.classpath
    main = run.main
    jvmArgs += '-Dfakeplayer.nogui=false'
}

startScripts {
    defaultJvmOpts = ['-Dfakeplayer.nogui=true']
}

task guiStartScripts(type: CreateStartScripts) {
    applicationName = startScripts.applicationName + '-GUI'
    classpath = startScripts.classpath
    mainClassName = startScripts.mainClassName
    outputDir = startScripts.outputDir
    defaultJvmOpts = ['-Dfakeplayer.nogui=false']
    doLast {
        def windowsScriptText = windowsScript.text.replaceAll('java\\.exe', 'javaw.exe')
        windowsScriptText = windowsScriptText.replaceAll('"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS%', 'start "" /B "%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS%')
        windowsScript.write(windowsScriptText)
    }
}

startScripts.dependsOn(guiStartScripts)

shadowJar {
    manifest {
        attributes 'Main-Class': 'com.ddf.fakeplayer.main.Main'
    }
}
